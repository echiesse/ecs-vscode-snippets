{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Class": {
		"scope": "python",
		"prefix": "class",
		"body": [
			"class ${1:Classname}:",
			"    def __init__(self):",
			"        pass",
			"",
			"    $2",
		],
		"description": "Class skeleton"
	},

	"Class initializer body": {
		"scope": "python",
		"prefix": "__init__",
		"body": [
			"__init__(self, ${1:arg}):",
			"    ${2:pass}",
			""
		],
		"description": "__init__"
	},

	"Class call method": {
		"scope": "python",
		"prefix": "__call__",
		"body": [
			"__call__(self, *args, **kwargs):",
            "    ${1:# code}",
			""
		],
		"description": "__call__"
	},

	"Class Method": {
		"scope": "python",
		"prefix": "@classmethod",
		"body": [
			"@classmethod",
			"def ${1:name}(cls):",
			"    return $2"
		],
		"description": "classmethod"
	},

	"Main": {
		"scope": "python",
		"prefix": "ifmain",
		"body": [
			"if __name__ == '__main__':",
			"    ${1:run()}",
			""
		],
		"description": "Main block skeleton"
	},

	"Print debug": {
		"scope": "python",
		"prefix": "pdebug",
		"body": [
			"print('$1') #<<<<<",
			"$2"
		],
		"description": "Print"
	},

	"Property": {
		"scope": "python",
		"prefix": "@property",
		"body": [
			"@property",
			"def ${1:name}(self):",
			"    return $2"
		],
		"description": "Print getter"
	},

	"Property Setter": {
		"scope": "python",
		"prefix": "psetter",
		"body": [
			"@${1:name}.setter",
			"def ${1:name}(self, value):",
			"    $2"
		],
		"description": "Property setter"
	},

	"Full Property": {
		"scope": "python",
		"prefix": "property",
		"body": [
			"@property",
			"def ${1:name}(self):",
			"    return $2",
			"",
			"@${1:name}.setter",
			"def ${1:name}(self, value):",
			"    $3"
		],
		"description": "Property"
	},

	"Runnable Scripy": {
		"scope": "python",
		"prefix": "script",
		"body": [
			"def run():",
			"    ${1:pass}",
			"",
			"",
			"if __name__ == '__main__':",
			"    run()",
			""
		],
		"description": "Run skeleton"
	},
	"Debugger Set Trace": {
		"scope": "python",
		"prefix": "pdb",
		"body": [
			"import pdb; pdb.set_trace() #<<<<<",
		],
		"description": "Debugger set trace"
	},
}